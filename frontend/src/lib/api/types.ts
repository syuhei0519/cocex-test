/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/auth/register": {
    /** ユーザー登録 */
    post: operations["registerUser"];
  };
  "/auth/login": {
    /** ログイン */
    post: operations["login"];
  };
  "/auth/logout": {
    /** ログアウト */
    post: operations["logout"];
  };
  "/auth/me": {
    /** 現在のユーザー情報取得 */
    get: operations["getCurrentUser"];
  };
  "/auth/password/forgot": {
    /** パスワードリセットメール送信 */
    post: operations["forgotPassword"];
  };
  "/auth/password/reset": {
    /** パスワードリセット */
    post: operations["resetPassword"];
  };
  "/users/me": {
    /** プロファイル更新 */
    patch: operations["updateProfile"];
  };
  "/accounts": {
    /** 口座一覧 */
    get: operations["listAccounts"];
    /** 口座作成 */
    post: operations["createAccount"];
  };
  "/accounts/{accountId}": {
    /** 口座詳細 */
    get: operations["getAccount"];
    /** 口座アーカイブ */
    delete: operations["archiveAccount"];
    /** 口座更新 */
    patch: operations["updateAccount"];
    parameters: {
      path: {
        accountId: components["parameters"]["AccountId"];
      };
    };
  };
  "/categories": {
    /** カテゴリ一覧 */
    get: operations["listCategories"];
    /** カテゴリ作成 */
    post: operations["createCategory"];
  };
  "/categories/{categoryId}": {
    /** カテゴリ削除 */
    delete: operations["deleteCategory"];
    /** カテゴリ更新 */
    patch: operations["updateCategory"];
    parameters: {
      path: {
        categoryId: components["parameters"]["CategoryId"];
      };
    };
  };
  "/payment-methods": {
    /** 支払い方法一覧 */
    get: operations["listPaymentMethods"];
    /** 支払い方法作成 */
    post: operations["createPaymentMethod"];
  };
  "/payment-methods/{paymentMethodId}": {
    /** 支払い方法削除 */
    delete: operations["deletePaymentMethod"];
    /** 支払い方法更新 */
    patch: operations["updatePaymentMethod"];
    parameters: {
      path: {
        paymentMethodId: components["parameters"]["PaymentMethodId"];
      };
    };
  };
  "/transactions": {
    /** 取引一覧 */
    get: operations["listTransactions"];
    /** 取引作成 */
    post: operations["createTransaction"];
  };
  "/transactions/{transactionId}": {
    /** 取引詳細 */
    get: operations["getTransaction"];
    /** 取引削除 */
    delete: operations["deleteTransaction"];
    /** 取引更新 */
    patch: operations["updateTransaction"];
    parameters: {
      path: {
        transactionId: components["parameters"]["TransactionId"];
      };
    };
  };
  "/transactions/export": {
    /** 取引の CSV エクスポートをリクエスト */
    post: operations["exportTransactions"];
  };
  "/budgets/{year}/{month}": {
    /** 指定月の予算取得 */
    get: operations["getMonthlyBudget"];
    /** 指定月の予算一括設定 */
    put: operations["upsertMonthlyBudget"];
    parameters: {
      path: {
        year: components["parameters"]["BudgetYear"];
        month: components["parameters"]["BudgetMonth"];
      };
    };
  };
  "/budgets/{year}/{month}/copy": {
    /** 前月の予算をコピー */
    post: operations["copyBudgetFromPreviousMonth"];
    parameters: {
      path: {
        year: components["parameters"]["BudgetYear"];
        month: components["parameters"]["BudgetMonth"];
      };
    };
  };
  "/budgets/{year}/{month}/summary": {
    /** 予算と実績のサマリー */
    get: operations["getBudgetSummary"];
    parameters: {
      path: {
        year: components["parameters"]["BudgetYear"];
        month: components["parameters"]["BudgetMonth"];
      };
    };
  };
  "/reports/dashboard": {
    /** ダッシュボード指標取得 */
    get: operations["getDashboard"];
  };
  "/reports/summary": {
    /** 任意期間の集計 */
    get: operations["getSummaryReport"];
  };
  "/reports/monthly-export": {
    /** 月次サマリー PDF 生成リクエスト */
    post: operations["requestMonthlyReportExport"];
  };
  "/notifications": {
    /** 通知一覧 */
    get: operations["listNotifications"];
  };
  "/notifications/{notificationId}": {
    /** 通知の既読更新 */
    patch: operations["markNotification"];
    parameters: {
      path: {
        notificationId: components["parameters"]["NotificationId"];
      };
    };
  };
  "/integrations/providers": {
    /** 連携可能な外部サービス一覧 */
    get: operations["listIntegrationProviders"];
  };
  "/integrations/settings": {
    /** 現在の外部連携設定取得 */
    get: operations["getIntegrationSettings"];
  };
  "/integrations/webhooks/{provider}": {
    /**
     * 外部サービスからの Webhook 受信
     * @description 署名検証とキュー投入の枠組みのみを提供する。詳細なペイロードは provider ごとに拡張する。
     */
    post: operations["receiveWebhook"];
    parameters: {
      path: {
        /** @description Webhook を送信する外部サービス識別子 */
        provider: string;
      };
    };
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    ProblemDetail: {
      /** @description エラー概要 */
      title: string;
      /** @description HTTP ステータスコード */
      status: number;
      detail?: string;
      instance?: string;
    };
    ValidationError: components["schemas"]["ProblemDetail"] & {
      errors?: {
        [key: string]: string[];
      };
    };
    RegisterRequest: {
      /** Format: email */
      email: string;
      /** Format: password */
      password: string;
      name: string;
    };
    RegistrationPendingResponse: {
      message?: string;
      /** @default true */
      requiresEmailVerification?: boolean;
    };
    LoginRequest: {
      /** Format: email */
      email: string;
      /** Format: password */
      password: string;
    };
    LoginResponse: {
      /** @description API トークン（ヘッダー認証用） */
      token?: string;
      user?: components["schemas"]["User"];
    };
    PasswordForgotRequest: {
      /** Format: email */
      email: string;
    };
    PasswordResetRequest: {
      token: string;
      /** Format: email */
      email: string;
      /** Format: password */
      password: string;
    };
    User: {
      /** Format: uuid */
      id: string;
      /** Format: email */
      email: string;
      name: string;
      /** @description 言語コード (ja-JP など) */
      locale?: string;
      /** @description ISO 通貨コード (JPY など) */
      currency?: string;
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
    };
    UserProfileUpdateRequest: {
      name?: string;
      locale?: string;
      currency?: string;
    };
    Account: {
      /** Format: uuid */
      id: string;
      name: string;
      /** @enum {string} */
      type: "cash" | "bank" | "credit" | "prepaid" | "other";
      /** @description 通貨型は文字列で表現 */
      balance: string;
      currency?: string;
      order?: number;
      isArchived: boolean;
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
    };
    AccountCreateRequest: {
      name: string;
      /** @enum {string} */
      type: "cash" | "bank" | "credit" | "prepaid" | "other";
      currency: string;
      initialBalance?: string;
    };
    AccountUpdateRequest: {
      name?: string;
      order?: number;
      isArchived?: boolean;
    };
    Category: {
      /** Format: uuid */
      id: string;
      name: string;
      /** @enum {string} */
      type: "income" | "expense";
      /** Format: uuid */
      parentId?: string | null;
      color?: string;
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
    };
    CategoryCreateRequest: {
      name: string;
      /** @enum {string} */
      type: "income" | "expense";
      /** Format: uuid */
      parentId?: string | null;
      color?: string;
    };
    CategoryUpdateRequest: {
      name?: string;
      color?: string;
      /** Format: uuid */
      parentId?: string | null;
    };
    PaymentMethod: {
      /** Format: uuid */
      id: string;
      name: string;
      description?: string | null;
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
    };
    PaymentMethodCreateRequest: {
      name: string;
      description?: string | null;
    };
    PaymentMethodUpdateRequest: {
      name?: string;
      description?: string | null;
    };
    Transaction: {
      /** Format: uuid */
      id: string;
      /** Format: uuid */
      accountId: string;
      /** Format: uuid */
      categoryId?: string | null;
      /** Format: uuid */
      paymentMethodId?: string | null;
      /** @enum {string} */
      type: "income" | "expense";
      amount: string;
      currency?: string;
      memo?: string;
      tags?: string[];
      /** Format: date-time */
      occurredAt: string;
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
    };
    TransactionListResponse: {
      data?: components["schemas"]["Transaction"][];
      meta?: components["schemas"]["PaginationMeta"];
    };
    TransactionCreateRequest: {
      /** Format: uuid */
      accountId: string;
      /** Format: uuid */
      categoryId?: string | null;
      /** Format: uuid */
      paymentMethodId?: string | null;
      /** @enum {string} */
      type: "income" | "expense";
      amount: string;
      currency?: string;
      memo?: string;
      tags?: string[];
      /** Format: date-time */
      occurredAt: string;
    };
    TransactionUpdateRequest: {
      /** Format: uuid */
      accountId?: string;
      /** Format: uuid */
      categoryId?: string | null;
      /** Format: uuid */
      paymentMethodId?: string | null;
      /** @enum {string} */
      type?: "income" | "expense";
      amount?: string;
      memo?: string;
      tags?: string[];
      /** Format: date-time */
      occurredAt?: string;
    };
    TransactionExportRequest: {
      /** Format: date */
      dateFrom: string;
      /** Format: date */
      dateTo: string;
      /** Format: uuid */
      accountId?: string | null;
      /** Format: uuid */
      categoryId?: string | null;
    };
    ExportJob: {
      /** Format: uuid */
      id: string;
      /** @enum {string} */
      type: "transaction_csv" | "monthly_report_pdf";
      /** @enum {string} */
      status: "queued" | "processing" | "completed" | "failed";
      /** Format: date-time */
      requestedAt?: string;
      /** Format: date-time */
      completedAt?: string | null;
      /** Format: uri */
      downloadUrl?: string | null;
    };
    Budget: {
      year?: number;
      month?: number;
      currency?: string;
      categories?: components["schemas"]["BudgetCategory"][];
    };
    BudgetCategory: {
      /** Format: uuid */
      categoryId: string;
      amount: string;
      thresholdPercent?: number | null;
    };
    BudgetUpsertRequest: {
      currency: string;
      categories: components["schemas"]["BudgetCategory"][];
    };
    BudgetSummary: {
      year?: number;
      month?: number;
      currency?: string;
      totals?: {
        budgeted?: string;
        actual?: string;
        difference?: string;
      };
      categories?: {
        /** Format: uuid */
        categoryId?: string;
        categoryName?: string;
        budgeted?: string;
        actual?: string;
        difference?: string;
        thresholdPercent?: number | null;
      }[];
    };
    Dashboard: {
      month?: string;
      incomeTotal?: string;
      expenseTotal?: string;
      netAmount?: string;
      topCategories?: {
        /** Format: uuid */
        categoryId?: string;
        categoryName?: string;
        amount?: string;
      }[];
      recentTransactions?: components["schemas"]["Transaction"][];
    };
    ReportSummary: {
      /** Format: date */
      dateFrom?: string;
      /** Format: date */
      dateTo?: string;
      incomeByMonth?: components["schemas"]["TimeSeriesPoint"][];
      expenseByMonth?: components["schemas"]["TimeSeriesPoint"][];
      categoryTotals?: {
        /** Format: uuid */
        categoryId?: string;
        categoryName?: string;
        amount?: string;
      }[];
    };
    TimeSeriesPoint: {
      /** @description YYYY-MM 表記 */
      period: string;
      amount: string;
    };
    MonthlyReportRequest: {
      month: string;
      /** @default false */
      includeDetails?: boolean;
    };
    Notification: {
      /** Format: uuid */
      id: string;
      /** @description 通知の種類 */
      type: string;
      title?: string;
      body?: string;
      /** @enum {string} */
      status: "unread" | "read";
      /** Format: date-time */
      readAt?: string | null;
      /** Format: date-time */
      createdAt?: string;
    };
    NotificationListResponse: {
      data?: components["schemas"]["Notification"][];
      meta?: components["schemas"]["PaginationMeta"];
    };
    NotificationUpdateRequest: {
      /** @enum {string} */
      status: "read";
    };
    IntegrationProvider: {
      id?: string;
      name?: string;
      description?: string;
      categories?: string[];
    };
    IntegrationSettingList: {
      data?: {
        providerId?: string;
        isEnabled?: boolean;
        /** Format: date-time */
        lastSyncedAt?: string | null;
        metadata?: {
          [key: string]: unknown;
        };
      }[];
    };
    PaginationMeta: {
      total?: number;
      perPage?: number;
      currentPage?: number;
      lastPage?: number;
    };
  };
  responses: {
    /** @description バリデーションエラー */
    BadRequest: {
      content: {
        "application/json": components["schemas"]["ValidationError"];
      };
    };
    /** @description 認証エラー */
    Unauthorized: {
      content: {
        "application/json": components["schemas"]["ProblemDetail"];
      };
    };
    /** @description リソースが存在しない */
    NotFound: {
      content: {
        "application/json": components["schemas"]["ProblemDetail"];
      };
    };
  };
  parameters: {
    /** @description 口座 ID */
    AccountId: string;
    /** @description 取引 ID */
    TransactionId: string;
    /** @description カテゴリ ID */
    CategoryId: string;
    /** @description 支払い方法 ID */
    PaymentMethodId: string;
    /** @description 通知 ID */
    NotificationId: string;
    /** @description 期間開始日 (YYYY-MM-DD) */
    DateFrom?: string;
    /** @description 期間終了日 (YYYY-MM-DD) */
    DateTo?: string;
    /** @description 取引のカテゴリフィルタ */
    CategoryFilter?: string;
    /** @description 取引の口座フィルタ */
    AccountFilter?: string;
    /** @description 収入/支出の種別 */
    TransactionTypeFilter?: "income" | "expense";
    Page?: number;
    PageSize?: number;
    /** @description 対象年 */
    BudgetYear: number;
    /** @description 対象月 */
    BudgetMonth: number;
  };
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {
  /** ユーザー登録 */
  registerUser: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["RegisterRequest"];
      };
    };
    responses: {
      /** @description 仮登録完了（メール確認が必要） */
      201: {
        content: {
          "application/json": components["schemas"]["RegistrationPendingResponse"];
        };
      };
      400: components["responses"]["BadRequest"];
      /** @description 既に登録済みのメールアドレス */
      409: {
        content: {
          "application/json": components["schemas"]["ProblemDetail"];
        };
      };
    };
  };
  /** ログイン */
  login: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["LoginRequest"];
      };
    };
    responses: {
      /** @description ログイン成功 */
      200: {
        headers: {
          /** @description Sanctum セッション Cookie */
          "Set-Cookie"?: string;
        };
        content: {
          "application/json": components["schemas"]["LoginResponse"];
        };
      };
      401: components["responses"]["Unauthorized"];
    };
  };
  /** ログアウト */
  logout: {
    responses: {
      /** @description ログアウト成功 */
      204: {
        content: never;
      };
      401: components["responses"]["Unauthorized"];
    };
  };
  /** 現在のユーザー情報取得 */
  getCurrentUser: {
    responses: {
      /** @description ユーザー情報 */
      200: {
        content: {
          "application/json": components["schemas"]["User"];
        };
      };
      401: components["responses"]["Unauthorized"];
    };
  };
  /** パスワードリセットメール送信 */
  forgotPassword: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["PasswordForgotRequest"];
      };
    };
    responses: {
      /** @description リセットメール送信（既存ユーザーの場合） */
      202: {
        content: never;
      };
      400: components["responses"]["BadRequest"];
    };
  };
  /** パスワードリセット */
  resetPassword: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["PasswordResetRequest"];
      };
    };
    responses: {
      /** @description パスワードリセット成功 */
      204: {
        content: never;
      };
      400: components["responses"]["BadRequest"];
      /** @description トークン期限切れ */
      410: {
        content: {
          "application/json": components["schemas"]["ProblemDetail"];
        };
      };
    };
  };
  /** プロファイル更新 */
  updateProfile: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["UserProfileUpdateRequest"];
      };
    };
    responses: {
      /** @description 更新後のユーザープロファイル */
      200: {
        content: {
          "application/json": components["schemas"]["User"];
        };
      };
      400: components["responses"]["BadRequest"];
      401: components["responses"]["Unauthorized"];
    };
  };
  /** 口座一覧 */
  listAccounts: {
    responses: {
      /** @description 口座の一覧 */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Account"][];
          };
        };
      };
    };
  };
  /** 口座作成 */
  createAccount: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["AccountCreateRequest"];
      };
    };
    responses: {
      /** @description 新規口座 */
      201: {
        content: {
          "application/json": components["schemas"]["Account"];
        };
      };
      400: components["responses"]["BadRequest"];
    };
  };
  /** 口座詳細 */
  getAccount: {
    parameters: {
      path: {
        accountId: components["parameters"]["AccountId"];
      };
    };
    responses: {
      /** @description 口座情報 */
      200: {
        content: {
          "application/json": components["schemas"]["Account"];
        };
      };
      404: components["responses"]["NotFound"];
    };
  };
  /** 口座アーカイブ */
  archiveAccount: {
    parameters: {
      path: {
        accountId: components["parameters"]["AccountId"];
      };
    };
    responses: {
      /** @description アーカイブ完了 */
      204: {
        content: never;
      };
      404: components["responses"]["NotFound"];
    };
  };
  /** 口座更新 */
  updateAccount: {
    parameters: {
      path: {
        accountId: components["parameters"]["AccountId"];
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["AccountUpdateRequest"];
      };
    };
    responses: {
      /** @description 更新後の口座 */
      200: {
        content: {
          "application/json": components["schemas"]["Account"];
        };
      };
      400: components["responses"]["BadRequest"];
      404: components["responses"]["NotFound"];
    };
  };
  /** カテゴリ一覧 */
  listCategories: {
    responses: {
      /** @description カテゴリの一覧 */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Category"][];
          };
        };
      };
    };
  };
  /** カテゴリ作成 */
  createCategory: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CategoryCreateRequest"];
      };
    };
    responses: {
      /** @description 新規カテゴリ */
      201: {
        content: {
          "application/json": components["schemas"]["Category"];
        };
      };
      400: components["responses"]["BadRequest"];
    };
  };
  /** カテゴリ削除 */
  deleteCategory: {
    parameters: {
      path: {
        categoryId: components["parameters"]["CategoryId"];
      };
    };
    responses: {
      /** @description 削除完了 */
      204: {
        content: never;
      };
      404: components["responses"]["NotFound"];
    };
  };
  /** カテゴリ更新 */
  updateCategory: {
    parameters: {
      path: {
        categoryId: components["parameters"]["CategoryId"];
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CategoryUpdateRequest"];
      };
    };
    responses: {
      /** @description 更新後のカテゴリ */
      200: {
        content: {
          "application/json": components["schemas"]["Category"];
        };
      };
      400: components["responses"]["BadRequest"];
      404: components["responses"]["NotFound"];
    };
  };
  /** 支払い方法一覧 */
  listPaymentMethods: {
    responses: {
      /** @description 支払い方法の一覧 */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["PaymentMethod"][];
          };
        };
      };
    };
  };
  /** 支払い方法作成 */
  createPaymentMethod: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["PaymentMethodCreateRequest"];
      };
    };
    responses: {
      /** @description 新規支払い方法 */
      201: {
        content: {
          "application/json": components["schemas"]["PaymentMethod"];
        };
      };
      400: components["responses"]["BadRequest"];
    };
  };
  /** 支払い方法削除 */
  deletePaymentMethod: {
    parameters: {
      path: {
        paymentMethodId: components["parameters"]["PaymentMethodId"];
      };
    };
    responses: {
      /** @description 削除完了 */
      204: {
        content: never;
      };
      404: components["responses"]["NotFound"];
    };
  };
  /** 支払い方法更新 */
  updatePaymentMethod: {
    parameters: {
      path: {
        paymentMethodId: components["parameters"]["PaymentMethodId"];
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PaymentMethodUpdateRequest"];
      };
    };
    responses: {
      /** @description 更新後の支払い方法 */
      200: {
        content: {
          "application/json": components["schemas"]["PaymentMethod"];
        };
      };
      400: components["responses"]["BadRequest"];
      404: components["responses"]["NotFound"];
    };
  };
  /** 取引一覧 */
  listTransactions: {
    parameters: {
      query?: {
        dateFrom?: components["parameters"]["DateFrom"];
        dateTo?: components["parameters"]["DateTo"];
        categoryId?: components["parameters"]["CategoryFilter"];
        accountId?: components["parameters"]["AccountFilter"];
        transactionType?: components["parameters"]["TransactionTypeFilter"];
        page?: components["parameters"]["Page"];
        perPage?: components["parameters"]["PageSize"];
      };
    };
    responses: {
      /** @description 取引の一覧 */
      200: {
        content: {
          "application/json": components["schemas"]["TransactionListResponse"];
        };
      };
    };
  };
  /** 取引作成 */
  createTransaction: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["TransactionCreateRequest"];
      };
    };
    responses: {
      /** @description 新規取引 */
      201: {
        content: {
          "application/json": components["schemas"]["Transaction"];
        };
      };
      400: components["responses"]["BadRequest"];
    };
  };
  /** 取引詳細 */
  getTransaction: {
    parameters: {
      path: {
        transactionId: components["parameters"]["TransactionId"];
      };
    };
    responses: {
      /** @description 取引情報 */
      200: {
        content: {
          "application/json": components["schemas"]["Transaction"];
        };
      };
      404: components["responses"]["NotFound"];
    };
  };
  /** 取引削除 */
  deleteTransaction: {
    parameters: {
      path: {
        transactionId: components["parameters"]["TransactionId"];
      };
    };
    responses: {
      /** @description 削除完了 */
      204: {
        content: never;
      };
      404: components["responses"]["NotFound"];
    };
  };
  /** 取引更新 */
  updateTransaction: {
    parameters: {
      path: {
        transactionId: components["parameters"]["TransactionId"];
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TransactionUpdateRequest"];
      };
    };
    responses: {
      /** @description 更新後の取引 */
      200: {
        content: {
          "application/json": components["schemas"]["Transaction"];
        };
      };
      400: components["responses"]["BadRequest"];
      404: components["responses"]["NotFound"];
    };
  };
  /** 取引の CSV エクスポートをリクエスト */
  exportTransactions: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["TransactionExportRequest"];
      };
    };
    responses: {
      /** @description エクスポートジョブを受け付けた */
      202: {
        content: {
          "application/json": components["schemas"]["ExportJob"];
        };
      };
      400: components["responses"]["BadRequest"];
    };
  };
  /** 指定月の予算取得 */
  getMonthlyBudget: {
    parameters: {
      path: {
        year: components["parameters"]["BudgetYear"];
        month: components["parameters"]["BudgetMonth"];
      };
    };
    responses: {
      /** @description 予算リスト */
      200: {
        content: {
          "application/json": components["schemas"]["Budget"];
        };
      };
      404: components["responses"]["NotFound"];
    };
  };
  /** 指定月の予算一括設定 */
  upsertMonthlyBudget: {
    parameters: {
      path: {
        year: components["parameters"]["BudgetYear"];
        month: components["parameters"]["BudgetMonth"];
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["BudgetUpsertRequest"];
      };
    };
    responses: {
      /** @description 更新後の予算 */
      200: {
        content: {
          "application/json": components["schemas"]["Budget"];
        };
      };
      400: components["responses"]["BadRequest"];
    };
  };
  /** 前月の予算をコピー */
  copyBudgetFromPreviousMonth: {
    parameters: {
      path: {
        year: components["parameters"]["BudgetYear"];
        month: components["parameters"]["BudgetMonth"];
      };
    };
    responses: {
      /** @description コピー後の予算 */
      200: {
        content: {
          "application/json": components["schemas"]["Budget"];
        };
      };
      /** @description 前月データが存在しない */
      409: {
        content: {
          "application/json": components["schemas"]["ProblemDetail"];
        };
      };
    };
  };
  /** 予算と実績のサマリー */
  getBudgetSummary: {
    parameters: {
      path: {
        year: components["parameters"]["BudgetYear"];
        month: components["parameters"]["BudgetMonth"];
      };
    };
    responses: {
      /** @description 予算・実績比較 */
      200: {
        content: {
          "application/json": components["schemas"]["BudgetSummary"];
        };
      };
    };
  };
  /** ダッシュボード指標取得 */
  getDashboard: {
    parameters: {
      query: {
        /** @description 対象月 (YYYY-MM) */
        month: string;
      };
    };
    responses: {
      /** @description ダッシュボードデータ */
      200: {
        content: {
          "application/json": components["schemas"]["Dashboard"];
        };
      };
      400: components["responses"]["BadRequest"];
    };
  };
  /** 任意期間の集計 */
  getSummaryReport: {
    parameters: {
      query?: {
        dateFrom?: components["parameters"]["DateFrom"];
        dateTo?: components["parameters"]["DateTo"];
      };
    };
    responses: {
      /** @description 期間集計データ */
      200: {
        content: {
          "application/json": components["schemas"]["ReportSummary"];
        };
      };
      400: components["responses"]["BadRequest"];
    };
  };
  /** 月次サマリー PDF 生成リクエスト */
  requestMonthlyReportExport: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["MonthlyReportRequest"];
      };
    };
    responses: {
      /** @description エクスポートジョブ登録 */
      202: {
        content: {
          "application/json": components["schemas"]["ExportJob"];
        };
      };
      400: components["responses"]["BadRequest"];
    };
  };
  /** 通知一覧 */
  listNotifications: {
    parameters: {
      query?: {
        page?: components["parameters"]["Page"];
        perPage?: components["parameters"]["PageSize"];
      };
    };
    responses: {
      /** @description 通知履歴 */
      200: {
        content: {
          "application/json": components["schemas"]["NotificationListResponse"];
        };
      };
    };
  };
  /** 通知の既読更新 */
  markNotification: {
    parameters: {
      path: {
        notificationId: components["parameters"]["NotificationId"];
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["NotificationUpdateRequest"];
      };
    };
    responses: {
      /** @description 更新後の通知 */
      200: {
        content: {
          "application/json": components["schemas"]["Notification"];
        };
      };
      404: components["responses"]["NotFound"];
    };
  };
  /** 連携可能な外部サービス一覧 */
  listIntegrationProviders: {
    responses: {
      /** @description プロバイダ情報 */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["IntegrationProvider"][];
          };
        };
      };
    };
  };
  /** 現在の外部連携設定取得 */
  getIntegrationSettings: {
    responses: {
      /** @description 連携設定一覧 */
      200: {
        content: {
          "application/json": components["schemas"]["IntegrationSettingList"];
        };
      };
    };
  };
  /**
   * 外部サービスからの Webhook 受信
   * @description 署名検証とキュー投入の枠組みのみを提供する。詳細なペイロードは provider ごとに拡張する。
   */
  receiveWebhook: {
    parameters: {
      path: {
        /** @description Webhook を送信する外部サービス識別子 */
        provider: string;
      };
    };
    requestBody: {
      content: {
        "application/json": {
          [key: string]: unknown;
        };
      };
    };
    responses: {
      /** @description Webhook を受け付けた */
      202: {
        content: never;
      };
      400: components["responses"]["BadRequest"];
    };
  };
}
